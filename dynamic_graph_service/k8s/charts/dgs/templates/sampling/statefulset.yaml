apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "dgs.sampling.name" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "dgs.labels" . | nindent 4 }}
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
    app.kubernetes.io/component: sampling
  {{- if .Values.commonAnnotations }}
  annotations:
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  podManagementPolicy: Parallel
  replicas: {{ .Values.sampling.workerNum }}
  selector:
    matchLabels:
      {{- include "dgs.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: sampling
  serviceName: {{ include "dgs.sampling.name" . }}-headless
  updateStrategy:
    {{- include "common.tplvalues.render" (dict "value" .Values.sampling.updateStrategy "context" $ ) | nindent 4 }}
  template:
    metadata:
      labels:
        {{- include "dgs.labels" . | nindent 8 }}
        app.kubernetes.io/component: sampling
        {{- if .Values.sampling.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.sampling.podLabels "context" $) | nindent 8 }}
        {{- end }}
      {{- if .Values.sampling.podAnnotations }}
      annotations:
        {{- include "common.tplvalues.render" (dict "value" .Values.sampling.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
    spec:
      affinity:
      {{- if .Values.sampling.affinity }}
        {{- include "common.tplvalues.render" (dict "value" .Values.sampling.affinity "context" $) | nindent 8 }}
      {{- else }}
        podAffinity:
          {{- include "common.affinities.pods" (dict "type" .Values.sampling.podAffinityPreset "component" "sampling" "context" $) | nindent 10 }}
        podAntiAffinity:
          {{- include "common.affinities.pods" (dict "type" .Values.sampling.podAntiAffinityPreset "component" "sampling" "context" $) | nindent 10 }}
        nodeAffinity:
          {{- include "common.affinities.nodes" (dict "type" .Values.sampling.nodeAffinityPreset.type "key" .Values.sampling.nodeAffinityPreset.key "values" .Values.sampling.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.sampling.nodeSelector }}
      nodeSelector:
        {{- include "common.tplvalues.render" (dict "value" .Values.sampling.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.sampling.tolerations }}
      tolerations:
        {{- include "common.tplvalues.render" (dict "value" .Values.sampling.tolerations "context" $) | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "dgs.serviceAccountName" . }}
      {{- include "dgs.images.pullSecrets" (dict "imageRoot" .Values.image) | nindent 6 }}
      initContainers:
        - name: sampling-init
          image: {{ include "dgs.images.image" (dict "imageRoot" .Values.image) }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          command:
            - /bin/bash
            - -c
            - |
              mkdir -p {{ .Values.sampling.persistence.mountPath }}/sample_store
              mkdir -p {{ .Values.sampling.persistence.mountPath }}/subs_table

              mkdir -p {{ .Values.sampling.workdir }}/package
              wget {{ .Values.packageRepoURL }}/{{ .Values.packageName }} -q -P /tmp
              tar zxvf /tmp/{{ .Values.packageName }} -C {{ .Values.sampling.workdir }}/package --strip-components 1
              rm -f /tmp/{{ .Values.packageName }}
          volumeMounts:
            - name: ephemeral
              mountPath: {{ .Values.sampling.workdir }}
            - name: checkpoint-data
              mountPath: {{ .Values.sampling.persistence.mountPath }}
      containers:
        - name: sampling
          image: {{ include "dgs.images.image" (dict "imageRoot" .Values.image) }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          command:
            - /bin/bash
            - -c
            - |
              cd {{ .Values.sampling.workdir }}/package/bin
              if [ -f "TERMINATE_FLAG" ]; then rm -f TERMINATE_FLAG; fi

              mkdir -p {{ .Values.sampling.workdir }}/sample_store
              rm -rf {{ .Values.sampling.workdir }}/sample_store/*
              mkdir -p {{ .Values.sampling.workdir }}/subs_table
              rm -rf {{ .Values.sampling.workdir }}/subs_table/*

              export SAMPLING_WORKER_ID=${HOSTNAME##*-}
              cd {{ .Values.sampling.workdir }}/package/bin
              ./service_main {{ include "dgs.glog.option" . }} \
                --config-file {{ .Values.configPath }}/sampling.cnf \
                --worker-id ${SAMPLING_WORKER_ID}
          {{- if .Values.sampling.livenessProbe.enabled }}
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -c
                - |
                  ProcNumber=$(ps -ef | grep "service_main" | grep -v grep | wc -l)
                  if [ $ProcNumber -le 0 ] || [ -f "{{ .Values.sampling.workdir }}/package/bin/TERMINATE_FLAG" ]; then exit 1; else exit 0; fi
            {{- include "common.tplvalues.render" (dict "value" (omit .Values.sampling.livenessProbe "enabled") "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.sampling.resources }}
          resources:
            {{- toYaml .Values.sampling.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: config
              mountPath: {{ .Values.configPath }}
            - name: ephemeral
              mountPath: {{ .Values.sampling.workdir }}
            - name: checkpoint-data
              mountPath: {{ .Values.sampling.persistence.mountPath }}
      volumes:
        - name: config
          configMap:
            name: {{ include "dgs.configmap.name" . }}
            items:
              - key: schema.json
                path: schema.json
              - key: sampling.cnf
                path: sampling.cnf
        - name: ephemeral
          emptyDir: {}
        {{- if not .Values.sampling.persistence.enabled }}
        - name: checkpoint-data
          emptyDir: {}
        {{- else if .Values.sampling.persistence.existingClaim }}
        - name: checkpoint-data
          persistentVolumeClaim:
            claimName: {{ tpl .Values.sampling.persistence.existingClaim . }}
        {{- end }}
  {{- if and .Values.sampling.persistence.enabled (not .Values.sampling.persistence.existingClaim) }}
  volumeClaimTemplates:
    - metadata:
        name: checkpoint-data
        {{- if .Values.sampling.persistence.annotations }}
        annotations: {{- include "common.tplvalues.render" (dict "value" .Values.sampling.persistence.annotations "context" $) | nindent 10 }}
        {{- end }}
      spec:
        accessModes:
          {{- range .Values.sampling.persistence.accessModes }}
          - {{ . | quote }}
          {{- end }}
        resources:
          requests:
            storage: {{ .Values.sampling.persistence.size | quote }}
        {{- include "dgs.storage.class" .Values.sampling.persistence | nindent 8 }}
        {{- if .Values.sampling.persistence.selector }}
        selector: {{- include "common.tplvalues.render" (dict "value" .Values.sampling.persistence.selector "context" $) | nindent 10 }}
        {{- end -}}
  {{- end }}