apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "dgs.dataloader.name" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "dgs.labels" . | nindent 4 }}
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
    app.kubernetes.io/component: dataloader
  {{- if .Values.commonAnnotations }}
  annotations:
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  podManagementPolicy: Parallel
  replicas: {{ .Values.dataloader.replicaCount }}
  selector:
    matchLabels:
      {{- include "dgs.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: dataloader
  serviceName: {{ include "dgs.dataloader.name" . }}-headless
  updateStrategy:
    {{- include "common.tplvalues.render" (dict "value" .Values.dataloader.updateStrategy "context" $ ) | nindent 4 }}
  template:
    metadata:
      labels:
        {{- include "dgs.labels" . | nindent 8 }}
        app.kubernetes.io/component: dataloader
        {{- if .Values.dataloader.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.dataloader.podLabels "context" $) | nindent 8 }}
        {{- end }}
      {{- if .Values.dataloader.podAnnotations }}
      annotations:
        {{- include "common.tplvalues.render" (dict "value" .Values.dataloader.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
    spec:
      affinity:
      {{- if .Values.dataloader.affinity }}
        {{- include "common.tplvalues.render" (dict "value" .Values.dataloader.affinity "context" $) | nindent 8 }}
      {{- else }}
        podAffinity:
          {{- include "common.affinities.pods" (dict "type" .Values.dataloader.podAffinityPreset "component" "dataloader" "context" $) | nindent 10 }}
        podAntiAffinity:
          {{- include "common.affinities.pods" (dict "type" .Values.dataloader.podAntiAffinityPreset "component" "dataloader" "context" $) | nindent 10 }}
        nodeAffinity:
          {{- include "common.affinities.nodes" (dict "type" .Values.dataloader.nodeAffinityPreset.type "key" .Values.dataloader.nodeAffinityPreset.key "values" .Values.dataloader.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.dataloader.nodeSelector }}
      nodeSelector:
        {{- include "common.tplvalues.render" (dict "value" .Values.dataloader.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.dataloader.tolerations }}
      tolerations:
        {{- include "common.tplvalues.render" (dict "value" .Values.dataloader.tolerations "context" $) | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "dgs.serviceAccountName" . }}
      {{- include "dgs.images.pullSecrets" (dict "imageRoot" .Values.image.dl) | nindent 6 }}
      initContainers:
        - name: dataloader-init
          image: {{ include "dgs.images.image" (dict "imageRoot" .Values.image.dl) }}
          imagePullPolicy: {{ .Values.image.dl.pullPolicy | quote }}
          command:
            - /bin/bash
            - -c
            - |
            {{- if (eq "dblp" (lower .Values.dataloader.sourceType)) }}
              sudo mkdir -p {{ .Values.dataloader.workdir }}/package
              sudo wget {{ .Values.remoteFileRepoURL }}/package/file-dataloader-built.tgz -q -P /tmp
              sudo tar zxvf /tmp/file-dataloader-built.tgz -C {{ .Values.dataloader.workdir }}/package --strip-components 1
              sudo rm -f /tmp/file-dataloader-built.tgz

              sudo mkdir -p {{ .Values.dataloader.workdir }}/data
              sudo wget {{ .Values.remoteFileRepoURL }}/data//github/DBLP.csv -q -O {{ .Values.dataloader.workdir }}/data/dblp.csv
              sudo python3 {{ .Values.dataloader.workdir }}/package/bin/dblp_preprossing.py \
                --dataset {{ .Values.dataloader.workdir }}/data/dblp.csv \
                --divide-year {{ int .Values.dataloader.dblp.divideYear }} \
                --output-dir {{ .Values.dataloader.workdir }}/data
            {{- else if (eq "graphscope" (lower .Values.dataloader.sourceType)) }}
              sudo mkdir -p {{ .Values.dataloader.persistence.mountPath }}/polling_offsets
              sudo mkdir -p {{ .Values.dataloader.persistence.mountPath }}/bulk_load_flags

              sudo mkdir -p {{ .Values.dataloader.workdir }}/restored
              sudo wget {{ .Values.remoteFileRepoURL }}/data/github/maxgraph-restore.tgz -q -P /tmp
              sudo tar zxvf /tmp/maxgraph-restore.tgz -C {{ .Values.dataloader.workdir }}/restored --strip-components 1
              sudo rm -f /tmp/maxgraph-restore.tgz

              sudo mkdir -p {{ .Values.dataloader.workdir }}/package
              sudo wget {{ .Values.remoteFileRepoURL }}/package/gs-dataloader-built.tgz -q -P /tmp
              sudo tar zxvf /tmp/gs-dataloader-built.tgz -C {{ .Values.dataloader.workdir }}/package --strip-components 1
              sudo rm -f /tmp/gs-dataloader-built.tgz
            {{- else }}
              echo "Unkown source type of dataloader, nothing to do"
            {{- end }}
          volumeMounts:
            - name: ephemeral
              mountPath: {{ .Values.dataloader.workdir }}
            - name: checkpoint-data
              mountPath: {{ .Values.dataloader.persistence.mountPath }}
      containers:
        - name: dataloader
          image: {{ include "dgs.images.image" (dict "imageRoot" .Values.image.dl) }}
          imagePullPolicy: {{ .Values.image.dl.pullPolicy | quote }}
          command:
            - /bin/bash
            - -c
            - |
            {{- if (eq "dblp" (lower .Values.dataloader.sourceType)) }}
              cd {{ .Values.dataloader.workdir }}/package/bin
              if [ -f "TERMINATE_FLAG" ]; then sudo rm -f TERMINATE_FLAG; fi

              export DATALOADER_ID=${HOSTNAME##*-}
              export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:{{ .Values.dataloader.workdir }}/package/lib
              cd {{ .Values.dataloader.workdir }}/package/bin
              sudo ./file_data_loading_service {{ include "dgs.glog.option" . }} \
                --config-file {{ .Values.configPath }}/dataloader.cnf \
                --worker-id ${DATALOADER_ID} \
                --delimiter \& \
                --pattern-def-file {{ .Values.dataloader.workdir }}/data/dblp.pattern \
                --bulk-load-file {{ .Values.dataloader.workdir }}/data/dblp.content.bulk \
                --streaming-load-file {{ .Values.dataloader.workdir }}/data/dblp.content.streaming
            {{- else if (eq "graphscope" (lower .Values.dataloader.sourceType)) }}
              cd {{ .Values.dataloader.workdir }}/package/bin
              if [ -f "TERMINATE_FLAG" ]; then sudo rm -f TERMINATE_FLAG; fi

              export DATALOADER_ID=${HOSTNAME##*-}
              export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:{{ .Values.dataloader.workdir }}/package/lib
              cd {{ .Values.dataloader.workdir }}/package/bin
              sudo ./graphscope_data_loading_service {{ include "dgs.glog.option" . }} \
                --config-file {{ .Values.configPath }}/dataloader.cnf \
                --worker-id ${DATALOADER_ID}
            {{- else }}
              echo "Unkown source type of dataloader, nothing to do"
              while true; do sleep 600s; done
            {{- end }}
          {{- if .Values.dataloader.livenessProbe.enabled }}
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -c
                - |
                  ProcNumber=$(ps -ef | grep "data_loading_service" | grep -v grep | wc -l)
                  if [ $ProcNumber -le 0 ] || [ -f "{{ .Values.dataloader.workdir }}/package/bin/TERMINATE_FLAG" ]; then exit 1; else exit 0; fi
            {{- include "common.tplvalues.render" (dict "value" (omit .Values.dataloader.livenessProbe "enabled") "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.dataloader.resources }}
          resources:
            {{- toYaml .Values.dataloader.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: config
              mountPath: {{ .Values.configPath }}
            - name: ephemeral
              mountPath: {{ .Values.dataloader.workdir }}
            - name: checkpoint-data
              mountPath: {{ .Values.dataloader.persistence.mountPath }}
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      volumes:
        - name: config
          configMap:
            name: {{ include "dgs.configmap.name" . }}
            items:
              - key: schema.json
                path: schema.json
              - key: dataloader.cnf
                path: dataloader.cnf
        - name: ephemeral
          emptyDir: {}
        {{- if not .Values.dataloader.persistence.enabled }}
        - name: checkpoint-data
          emptyDir: {}
        {{- else if .Values.dataloader.persistence.existingClaim }}
        - name: checkpoint-data
          persistentVolumeClaim:
            claimName: {{ tpl .Values.dataloader.persistence.existingClaim . }}
        {{- end }}
  {{- if and .Values.dataloader.persistence.enabled (not .Values.dataloader.persistence.existingClaim) }}
  volumeClaimTemplates:
    - metadata:
        name: checkpoint-data
        {{- if .Values.dataloader.persistence.annotations }}
        annotations: {{- include "common.tplvalues.render" (dict "value" .Values.dataloader.persistence.annotations "context" $) | nindent 10 }}
        {{- end }}
      spec:
        accessModes:
          {{- range .Values.dataloader.persistence.accessModes }}
          - {{ . | quote }}
          {{- end }}
        resources:
          requests:
            storage: {{ .Values.dataloader.persistence.size | quote }}
        {{- include "dgs.storage.class" .Values.dataloader.persistence | nindent 8 }}
        {{- if .Values.dataloader.persistence.selector }}
        selector: {{- include "common.tplvalues.render" (dict "value" .Values.dataloader.persistence.selector "context" $) | nindent 10 }}
        {{- end -}}
  {{- end }}